# Generated by Django 3.2.9 on 2021-11-15 05:13

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import museum.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BasisOfRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'basis of record',
                'verbose_name_plural': 'basis of record',
                'db_table': 'basis_of_record',
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'class',
                'verbose_name_plural': 'classes',
                'db_table': 'class',
            },
        ),
        migrations.CreateModel(
            name='CollectionCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'collection code',
                'verbose_name_plural': 'collection codes',
                'db_table': 'collection_code',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('country_code', models.CharField(max_length=2, unique=True, verbose_name='country code')),
            ],
            options={
                'verbose_name': 'country',
                'verbose_name_plural': 'countries',
                'db_table': 'country',
            },
        ),
        migrations.CreateModel(
            name='County',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'county',
                'verbose_name_plural': 'counties',
                'db_table': 'county',
            },
        ),
        migrations.CreateModel(
            name='Disposition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'disposition',
                'verbose_name_plural': 'dispositions',
                'db_table': 'disposition',
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'family',
                'verbose_name_plural': 'families',
                'db_table': 'family',
            },
        ),
        migrations.CreateModel(
            name='Genus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'genus',
                'verbose_name_plural': 'genus',
                'db_table': 'genus',
            },
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'habitat',
                'verbose_name_plural': 'habitats',
                'db_table': 'habitat',
            },
        ),
        migrations.CreateModel(
            name='IdentifiedBy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'Identified by',
                'verbose_name_plural': 'Identified by',
                'db_table': 'identified_by',
            },
        ),
        migrations.CreateModel(
            name='Kingdom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'kingdom',
                'verbose_name_plural': 'kingdoms',
                'db_table': 'kingdom',
            },
        ),
        migrations.CreateModel(
            name='LifeStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'life stage',
                'verbose_name_plural': 'life stages',
                'db_table': 'life_stage',
            },
        ),
        migrations.CreateModel(
            name='Locality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('verbatim_locality', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim locality')),
            ],
            options={
                'verbose_name': 'locality',
                'verbose_name_plural': 'localities',
                'db_table': 'locality',
                'unique_together': {('name', 'verbatim_locality')},
            },
        ),
        migrations.CreateModel(
            name='Municipality',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'municipality',
                'verbose_name_plural': 'municipalities',
                'db_table': 'municipality',
            },
        ),
        migrations.CreateModel(
            name='NomenclaturalCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'nomenclatural code',
                'verbose_name_plural': 'nomenclatural codes',
                'db_table': 'nomenclatural_code',
            },
        ),
        migrations.CreateModel(
            name='OccurrenceStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'occurrence status',
                'verbose_name_plural': 'occurrence statuses',
                'db_table': 'occurrence_status',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'order',
                'verbose_name_plural': 'orders',
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Phylum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'phylum',
                'verbose_name_plural': 'phylum',
                'db_table': 'phylum',
            },
        ),
        migrations.CreateModel(
            name='Preparation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'preparation',
                'verbose_name_plural': 'preparations',
                'db_table': 'preparation',
            },
        ),
        migrations.CreateModel(
            name='RecordedBy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'recorded by',
                'verbose_name_plural': 'recorded by',
                'db_table': 'recorded_by',
            },
        ),
        migrations.CreateModel(
            name='SamplingProtocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'sampling protocol',
                'verbose_name_plural': 'sampling protocols',
                'db_table': 'sampling_protocol',
            },
        ),
        migrations.CreateModel(
            name='ScientificName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'scientific name',
                'verbose_name_plural': 'scientific names',
                'db_table': 'scientific_name',
            },
        ),
        migrations.CreateModel(
            name='ScientificNameAuthorship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'scientific name authorship',
                'verbose_name_plural': 'scientific name authorships',
                'db_table': 'scientific_name_authorship',
            },
        ),
        migrations.CreateModel(
            name='Sex',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'sex',
                'verbose_name_plural': 'sexes',
                'db_table': 'sex',
            },
        ),
        migrations.CreateModel(
            name='SpecificEpithet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'specific epithet',
                'verbose_name_plural': 'specific epithets',
                'db_table': 'specific_epithet',
            },
        ),
        migrations.CreateModel(
            name='StateProvince',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'state province',
                'verbose_name_plural': 'state provinces',
                'db_table': 'state_province',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'taxonomic status',
                'verbose_name_plural': 'taxonomic statuses',
                'db_table': 'taxonomic_status',
            },
        ),
        migrations.CreateModel(
            name='TaxonRank',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'taxon rank',
                'verbose_name_plural': 'taxon ranks',
                'db_table': 'taxon_rank',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'type',
                'verbose_name_plural': 'types',
                'db_table': 'type',
            },
        ),
        migrations.CreateModel(
            name='VernacularName',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'vernacular name',
                'verbose_name_plural': 'vernacular names',
                'db_table': 'vernacular_name',
            },
        ),
        migrations.CreateModel(
            name='WaterBody',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
            ],
            options={
                'verbose_name': 'water body',
                'verbose_name_plural': 'water bodies',
                'db_table': 'water_body',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modified', models.DateField(blank=True, null=True, verbose_name='modified')),
                ('language', models.CharField(default='es', max_length=2, verbose_name='language')),
                ('license', models.CharField(blank=True, max_length=255, null=True, verbose_name='license')),
                ('rights_holder', models.CharField(blank=True, max_length=255, null=True, verbose_name='rights holder')),
                ('access_rights', models.CharField(default='Sólo uso científico', max_length=255, verbose_name='access rights')),
                ('bibliographic_citation', models.TextField(blank=True, null=True, verbose_name='bibliographic citation')),
                ('references', models.TextField(blank=True, null=True, verbose_name='references')),
                ('institution_ID', models.CharField(default='892000757-3', max_length=255, verbose_name='institution ID')),
                ('collection_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='collection ID')),
                ('dataset_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='dataset ID')),
                ('institution_code', models.CharField(default='Unillanos', max_length=255, verbose_name='institution code')),
                ('dataset_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='dataset name')),
                ('owner_institution_code', models.CharField(blank=True, max_length=255, null=True, verbose_name='owner institution code')),
                ('information_withheld', models.TextField(blank=True, null=True, verbose_name='information withheld')),
                ('data_generalizations', models.TextField(blank=True, null=True, verbose_name='data generalizations')),
                ('dynamic_properties', models.JSONField(blank=True, null=True, verbose_name='dynamic properties')),
                ('occurrence_ID', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Invalid format', regex='(Unillanos|892000757-3):MHNU-[A-Z]{1,2}:\\d{3,}')], verbose_name='occurrence ID')),
                ('catalog_number', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(regex='MHNU-[A-Z]{1,2}[ -]\\d{3,}')], verbose_name='catalog number')),
                ('occurrence_remarks', models.TextField(blank=True, null=True, verbose_name='occurrence remarks')),
                ('record_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='record number')),
                ('organism_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='organism ID')),
                ('organism_quantity', models.CharField(blank=True, max_length=255, null=True, verbose_name='organism quantity')),
                ('organism_quantity_type', models.CharField(blank=True, max_length=255, null=True, verbose_name='organism quantity type')),
                ('organism_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='organism name')),
                ('organism_scope', models.CharField(blank=True, max_length=255, null=True, verbose_name='organism scope')),
                ('associated_organisms', models.TextField(blank=True, null=True, verbose_name='associated organisms')),
                ('organism_remarks', models.TextField(blank=True, null=True, verbose_name='organism remarks')),
                ('individual_count', models.PositiveSmallIntegerField(verbose_name='individual count')),
                ('reproductive_condition', models.CharField(blank=True, max_length=255, null=True, verbose_name='reproductive condition')),
                ('behavior', models.CharField(blank=True, max_length=255, null=True, verbose_name='behavior')),
                ('establishment_means', models.CharField(blank=True, max_length=255, null=True, verbose_name='establishment means')),
                ('other_catalog_numbers', models.CharField(blank=True, max_length=255, null=True, verbose_name='other catalog numbers')),
                ('previous_identifications', models.CharField(blank=True, max_length=255, null=True, verbose_name='previous identifications')),
                ('associated_media', models.CharField(blank=True, max_length=255, null=True, verbose_name='associated media')),
                ('associated_references', models.CharField(blank=True, max_length=255, null=True, verbose_name='associated references')),
                ('associated_occurrences', models.CharField(blank=True, max_length=255, null=True, verbose_name='associated occurrences')),
                ('associated_sequences', models.CharField(blank=True, max_length=255, null=True, verbose_name='associated sequences')),
                ('associated_taxa', models.CharField(blank=True, max_length=255, null=True, verbose_name='associated taxa')),
                ('material_sample_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='material_sample_ID')),
                ('event_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='event ID')),
                ('parent_event_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='parent event ID')),
                ('sampling_effort', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling effort')),
                ('sampling_size_value', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='sampling size value')),
                ('sampling_size_unit', models.CharField(blank=True, max_length=255, null=True, verbose_name='sampling size unit')),
                ('event_date', models.CharField(blank=True, max_length=255, null=True, validators=[museum.validators.validate_date], verbose_name='event date')),
                ('event_time', models.CharField(blank=True, max_length=255, null=True, verbose_name='event time')),
                ('start_day_of_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(366)], verbose_name='start day of year')),
                ('end_day_of_year', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(366)], verbose_name='end day of year')),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='year')),
                ('month', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(12)], verbose_name='month')),
                ('day', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)], verbose_name='day')),
                ('verbatim_event_date', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim event date')),
                ('field_number', models.CharField(blank=True, max_length=255, null=True, verbose_name='field number')),
                ('field_notes', models.TextField(blank=True, null=True, verbose_name='field notes')),
                ('event_remarks', models.TextField(blank=True, null=True, verbose_name='event remarks')),
                ('location_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='location ID')),
                ('higher_geography_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name=' higher geography ID')),
                ('higher_geography', models.CharField(blank=True, max_length=255, null=True, verbose_name=' higher geography')),
                ('continent', models.CharField(choices=[('AF', 'Africa'), ('AS', 'Asia'), ('EU', 'Europe'), ('NA', 'North America'), ('SA', 'South America'), ('OC', 'Oceania'), ('AN', 'Antarctica')], default='SA', max_length=2, verbose_name='continent')),
                ('island_group', models.CharField(blank=True, max_length=255, null=True, verbose_name='island group')),
                ('island', models.CharField(blank=True, max_length=255, null=True, verbose_name='island')),
                ('verbatim_elevation', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim elevation')),
                ('minimum_elevation_in_meters', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='minimum elevation in meters')),
                ('maximum_elevation_in_meters', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='maximum elevation in meters')),
                ('verbatim_depth', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim depth')),
                ('minimum_depth_in_meters', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='minimum depth in meters')),
                ('maximum_depth_in_meters', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='maximum depth in meters')),
                ('minimum_distance_above_surface_in_meters', models.CharField(blank=True, max_length=255, null=True, verbose_name='minimum distance above surface in meters')),
                ('maximum_distance_above_surface_in_meters', models.CharField(blank=True, max_length=255, null=True, verbose_name='maximum distance above surface in meters')),
                ('location_according_to', models.CharField(blank=True, max_length=255, null=True, verbose_name='location according to')),
                ('location_remarks', models.TextField(blank=True, null=True, verbose_name='location remarks')),
                ('verbatim_coordinates', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim coordinates')),
                ('verbatim_latitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim latitude')),
                ('verbatim_longitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim longitude')),
                ('verbatim_coordinate_system', models.CharField(blank=True, choices=[('grados decimales', 'Decimal degrees'), ('grados minutos decimales', 'Degrees, decimal minutes'), ('grados minutos segundos', 'Degrees, minutes, seconds'), ('UTM', 'UTM'), ('CRTM', 'CRTM')], default='grados minutos segundos', max_length=50, null=True, verbose_name='verbatim coordinate system')),
                ('verbatim_SRS', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim SRS')),
                ('decimal_latitude', models.FloatField(blank=True, null=True, verbose_name='decimal latitude')),
                ('decimal_longitude', models.FloatField(blank=True, null=True, verbose_name='decimal longitude')),
                ('geodetic_datum', models.CharField(blank=True, default='WGS84', max_length=255, null=True, verbose_name='geodetic datum')),
                ('coordinate_uncertainty_in_meters', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='coordinate uncertainty in meters')),
                ('coordinate_precision', models.FloatField(blank=True, null=True, verbose_name='coordinate precision')),
                ('point_radius_spatial_fit', models.CharField(blank=True, max_length=255, null=True, verbose_name='point radius spatial fit')),
                ('footprint_WKT', models.CharField(blank=True, max_length=255, null=True, verbose_name='footprint WKT')),
                ('footprint_SRS', models.CharField(blank=True, max_length=255, null=True, verbose_name='footprint SRS')),
                ('footprint_spatial_fit', models.CharField(blank=True, max_length=255, null=True, verbose_name='footprint spatial fit')),
                ('georeferenced_by', models.TextField(blank=True, null=True, verbose_name='georeferenced by')),
                ('georeferenced_date', models.CharField(blank=True, max_length=255, null=True, validators=[museum.validators.validate_date], verbose_name='georeferenced date')),
                ('georeference_protocol', models.CharField(blank=True, max_length=255, null=True, verbose_name='georeference protocol')),
                ('georeference_sources', models.CharField(blank=True, max_length=255, null=True, verbose_name='georeference sources')),
                ('georeference_verification_status', models.CharField(blank=True, choices=[('Sin verificación', 'No verification'), ('Verificado por el custodio de los datos', 'Verified by the custodian of the data'), ('Verificado por el proveedor de los datos', 'Verified by the data provider')], max_length=255, null=True, verbose_name='georeference verification status')),
                ('georeference_remarks', models.TextField(blank=True, null=True, verbose_name='georeference remarks')),
                ('geological_context_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='geological context ID')),
                ('earliest_eon_or_lowest_eonothem', models.CharField(blank=True, max_length=255, null=True, verbose_name='earliest eon or lowest eonothem')),
                ('latest_eon_or_highest_eonothem', models.CharField(blank=True, max_length=255, null=True, verbose_name='latest eon or highest eonothem')),
                ('earliest_era_or_lowest_erathem', models.CharField(blank=True, max_length=255, null=True, verbose_name='earliest era or lowest erathem')),
                ('latest_era_or_highest_erathem', models.CharField(blank=True, max_length=255, null=True, verbose_name='latest era or highest erathem')),
                ('earliest_period_or_lowest_system', models.CharField(blank=True, max_length=255, null=True, verbose_name='earliest period or lowest system')),
                ('latest_period_or_highest_system', models.CharField(blank=True, max_length=255, null=True, verbose_name='latest period or highest system')),
                ('earliest_epoch_or_lowest_series', models.CharField(blank=True, max_length=255, null=True, verbose_name='earliest epoch or lowest series')),
                ('latest_epoch_or_highest_series', models.CharField(blank=True, max_length=255, null=True, verbose_name='latest epoch or highest series')),
                ('earliest_age_or_lowest_stage', models.CharField(blank=True, max_length=255, null=True, verbose_name='earliest age or lowest stage')),
                ('latest_age_or_highest_stage', models.CharField(blank=True, max_length=255, null=True, verbose_name='latest age or highest stage')),
                ('lowest_biostratigraphic_zone', models.CharField(blank=True, max_length=255, null=True, verbose_name='lowest biostratigraphic zone')),
                ('highest_biostratigraphic_zone', models.CharField(blank=True, max_length=255, null=True, verbose_name='highest biostratigraphic zone')),
                ('lithostratigraphic_terms', models.CharField(blank=True, max_length=255, null=True, verbose_name='lithostratigraphic terms')),
                ('group', models.CharField(blank=True, max_length=255, null=True, verbose_name='group')),
                ('formation', models.CharField(blank=True, max_length=255, null=True, verbose_name='formation')),
                ('member', models.CharField(blank=True, max_length=255, null=True, verbose_name='member')),
                ('bed', models.CharField(blank=True, max_length=255, null=True, verbose_name='bed')),
                ('identification_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='identification ID')),
                ('date_identified', models.CharField(blank=True, max_length=255, null=True, validators=[museum.validators.validate_date], verbose_name='date identified')),
                ('identification_references', models.TextField(blank=True, null=True, verbose_name='identification references')),
                ('identification_verification_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='identification verification status')),
                ('identification_remarks', models.TextField(blank=True, null=True, verbose_name='identification remarks')),
                ('identification_qualifier', models.TextField(blank=True, null=True, verbose_name='identification qualifier')),
                ('type_status', models.TextField(blank=True, null=True, verbose_name='type status')),
                ('taxon_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='taxon ID')),
                ('scientific_name_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='scientific name ID')),
                ('accepted_name_usage_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='accepted name usage ID')),
                ('parent_name_usage_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='parent name usage ID')),
                ('original_name_usage_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='original name usage ID')),
                ('name_according_to_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='name according to ID')),
                ('name_published_in_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='name published in ID')),
                ('taxon_concept_ID', models.CharField(blank=True, max_length=255, null=True, verbose_name='taxon concept ID')),
                ('accepted_name_usage', models.CharField(blank=True, max_length=255, null=True, verbose_name='accepted name usage')),
                ('parent_name_usage', models.CharField(blank=True, max_length=255, null=True, verbose_name='parent name usage')),
                ('original_name_usage', models.CharField(blank=True, max_length=255, null=True, verbose_name='original name usage')),
                ('name_according_to', models.TextField(blank=True, null=True, verbose_name='name according to')),
                ('name_published_in', models.TextField(blank=True, null=True, verbose_name='name published in')),
                ('name_published_in_year', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='name published in year')),
                ('higher_classification', models.TextField(blank=True, null=True, verbose_name='higher classification')),
                ('subgenus', models.CharField(blank=True, max_length=255, null=True, verbose_name='subgenus')),
                ('infraspecific_epithet', models.CharField(blank=True, max_length=255, null=True, verbose_name='infraspecific epithet')),
                ('verbatim_taxon_rank', models.CharField(blank=True, max_length=255, null=True, verbose_name='verbatim taxon rank')),
                ('nomenclatural_status', models.CharField(blank=True, max_length=255, null=True, verbose_name='nomenclatural status')),
                ('taxon_remarks', models.TextField(blank=True, null=True, verbose_name='taxon remarks')),
                ('additional_data', models.JSONField(blank=True, null=True, verbose_name='additional data')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.class', verbose_name='class')),
                ('basis_of_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='museum.basisofrecord', verbose_name='basis of record')),
                ('collection_code', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='museum.collectioncode', verbose_name='collection code')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='museum.country', verbose_name='country')),
                ('county', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.county', verbose_name='county')),
                ('disposition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.disposition', verbose_name='disposition')),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.family', verbose_name='family')),
                ('genus', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.genus', verbose_name='genus')),
                ('habitat', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.habitat', verbose_name='habitat')),
                ('identified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.identifiedby', verbose_name='identified by')),
                ('kingdom', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.kingdom', verbose_name='kingdom')),
                ('life_stage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.lifestage', verbose_name='life stage')),
                ('locality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.locality', verbose_name='locality')),
                ('municipality', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.municipality', verbose_name='municipality')),
                ('nomenclatural_code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.nomenclaturalcode', verbose_name='nomenclatural code')),
                ('occurrence_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.occurrencestatus', verbose_name='occurrence status')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.order', verbose_name='order')),
                ('phylum', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.phylum', verbose_name='phylum')),
                ('preparations', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.preparation', verbose_name='preparations')),
                ('recorded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.recordedby', verbose_name='recorded by')),
                ('sampling_protocol', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.samplingprotocol', verbose_name='sampling protocol')),
                ('scientific_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.scientificname', verbose_name='scientific name')),
                ('scientific_name_authorship', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.scientificnameauthorship', verbose_name='scientific name authorship')),
                ('sex', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.sex', verbose_name='sex')),
                ('specific_epithet', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.specificepithet', verbose_name='specific epithet')),
                ('taxon_rank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.taxonrank', verbose_name='taxon rank')),
                ('taxonomic_status', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.taxonomicstatus', verbose_name='taxonomic status')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='museum.type', verbose_name='type')),
                ('vernacular_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.vernacularname', verbose_name='vernacular name')),
                ('water_body', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.waterbody', verbose_name='water body')),
            ],
            options={
                'verbose_name': 'record',
                'verbose_name_plural': 'records',
                'db_table': 'record',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='date when the object was created', verbose_name='created at')),
                ('modified_at', models.DateTimeField(auto_now=True, help_text='date when the object was modified', verbose_name='modified at')),
                ('image', models.ImageField(upload_to='images', verbose_name='image')),
                ('created_by', models.ForeignKey(blank=True, help_text='user who created the object', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='image_created_by', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('modified_by', models.ForeignKey(blank=True, help_text='user who performed the update', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='image_modified_by', to=settings.AUTH_USER_MODEL, verbose_name='modified by')),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='museum.record', verbose_name='record')),
            ],
            options={
                'verbose_name': 'image',
                'verbose_name_plural': 'images',
                'db_table': 'image',
            },
        ),
        migrations.AddField(
            model_name='county',
            name='state_province',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='museum.stateprovince', verbose_name='state province'),
        ),
    ]
